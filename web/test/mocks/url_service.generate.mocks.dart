// Mocks generated by Mockito 5.4.5 from annotations
// in link_shortener/test/mocks/url_service.generate.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:flutter/material.dart' as _i6;
import 'package:link_shortener/models/short_url.dart' as _i2;
import 'package:link_shortener/models/ttl.dart' as _i7;
import 'package:link_shortener/services/url_service.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeShortUrl_0 extends _i1.SmartFake implements _i2.ShortUrl {
  _FakeShortUrl_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [UrlService].
///
/// See the documentation for Mockito's code generation for more information.
class MockUrlService extends _i1.Mock implements _i3.UrlService {
  @override
  _i4.Future<String> shortenRestrictedUrl(String? url) =>
      (super.noSuchMethod(
            Invocation.method(#shortenRestrictedUrl, [url]),
            returnValue: _i4.Future<String>.value(
              _i5.dummyValue<String>(
                this,
                Invocation.method(#shortenRestrictedUrl, [url]),
              ),
            ),
            returnValueForMissingStub: _i4.Future<String>.value(
              _i5.dummyValue<String>(
                this,
                Invocation.method(#shortenRestrictedUrl, [url]),
              ),
            ),
          )
          as _i4.Future<String>);

  @override
  _i4.Future<String> createShortUrl({
    _i6.BuildContext? context,
    required String? url,
    required _i7.TTL? ttl,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#createShortUrl, [], {
              #context: context,
              #url: url,
              #ttl: ttl,
            }),
            returnValue: _i4.Future<String>.value(
              _i5.dummyValue<String>(
                this,
                Invocation.method(#createShortUrl, [], {
                  #context: context,
                  #url: url,
                  #ttl: ttl,
                }),
              ),
            ),
            returnValueForMissingStub: _i4.Future<String>.value(
              _i5.dummyValue<String>(
                this,
                Invocation.method(#createShortUrl, [], {
                  #context: context,
                  #url: url,
                  #ttl: ttl,
                }),
              ),
            ),
          )
          as _i4.Future<String>);

  @override
  _i4.Future<List<_i2.ShortUrl>> getUserUrls({_i6.BuildContext? context}) =>
      (super.noSuchMethod(
            Invocation.method(#getUserUrls, [], {#context: context}),
            returnValue: _i4.Future<List<_i2.ShortUrl>>.value(<_i2.ShortUrl>[]),
            returnValueForMissingStub: _i4.Future<List<_i2.ShortUrl>>.value(
              <_i2.ShortUrl>[],
            ),
          )
          as _i4.Future<List<_i2.ShortUrl>>);

  @override
  _i4.Future<_i2.ShortUrl> getUrlDetails(
    String? shortId, {
    _i6.BuildContext? context,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getUrlDetails, [shortId], {#context: context}),
            returnValue: _i4.Future<_i2.ShortUrl>.value(
              _FakeShortUrl_0(
                this,
                Invocation.method(
                  #getUrlDetails,
                  [shortId],
                  {#context: context},
                ),
              ),
            ),
            returnValueForMissingStub: _i4.Future<_i2.ShortUrl>.value(
              _FakeShortUrl_0(
                this,
                Invocation.method(
                  #getUrlDetails,
                  [shortId],
                  {#context: context},
                ),
              ),
            ),
          )
          as _i4.Future<_i2.ShortUrl>);

  @override
  _i4.Future<bool> deleteUrl(String? shortId, {_i6.BuildContext? context}) =>
      (super.noSuchMethod(
            Invocation.method(#deleteUrl, [shortId], {#context: context}),
            returnValue: _i4.Future<bool>.value(false),
            returnValueForMissingStub: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<_i2.ShortUrl> updateUrl({
    required String? shortId,
    String? customAlias,
    DateTime? expiresAt,
    _i6.BuildContext? context,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#updateUrl, [], {
              #shortId: shortId,
              #customAlias: customAlias,
              #expiresAt: expiresAt,
              #context: context,
            }),
            returnValue: _i4.Future<_i2.ShortUrl>.value(
              _FakeShortUrl_0(
                this,
                Invocation.method(#updateUrl, [], {
                  #shortId: shortId,
                  #customAlias: customAlias,
                  #expiresAt: expiresAt,
                  #context: context,
                }),
              ),
            ),
            returnValueForMissingStub: _i4.Future<_i2.ShortUrl>.value(
              _FakeShortUrl_0(
                this,
                Invocation.method(#updateUrl, [], {
                  #shortId: shortId,
                  #customAlias: customAlias,
                  #expiresAt: expiresAt,
                  #context: context,
                }),
              ),
            ),
          )
          as _i4.Future<_i2.ShortUrl>);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}
