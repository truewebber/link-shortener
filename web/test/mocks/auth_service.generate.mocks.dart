// Mocks generated by Mockito 5.4.5 from annotations
// in link_shortener/test/mocks/auth_service.generate.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:flutter/material.dart' as _i6;
import 'package:link_shortener/models/auth/oauth_provider.dart' as _i5;
import 'package:link_shortener/models/auth/user.dart' as _i7;
import 'package:link_shortener/models/auth/user_session.dart' as _i4;
import 'package:link_shortener/services/auth_service.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAuthResult_0 extends _i1.SmartFake implements _i2.AuthResult {
  _FakeAuthResult_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [AuthService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthService extends _i1.Mock implements _i2.AuthService {
  @override
  _i3.Stream<_i4.UserSession?> get authStateChanges =>
      (super.noSuchMethod(
            Invocation.getter(#authStateChanges),
            returnValue: _i3.Stream<_i4.UserSession?>.empty(),
            returnValueForMissingStub: _i3.Stream<_i4.UserSession?>.empty(),
          )
          as _i3.Stream<_i4.UserSession?>);

  @override
  bool get isAuthenticated =>
      (super.noSuchMethod(
            Invocation.getter(#isAuthenticated),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  _i3.Future<void> initialize() =>
      (super.noSuchMethod(
            Invocation.method(#initialize, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> initLocalStorage() =>
      (super.noSuchMethod(
            Invocation.method(#initLocalStorage, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> saveSession(_i4.UserSession? session) =>
      (super.noSuchMethod(
            Invocation.method(#saveSession, [session]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> signInWithOAuth(
    _i5.OAuthProvider? provider, {
    _i6.BuildContext? context,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #signInWithOAuth,
              [provider],
              {#context: context},
            ),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<bool> refreshToken({_i6.BuildContext? context}) =>
      (super.noSuchMethod(
            Invocation.method(#refreshToken, [], {#context: context}),
            returnValue: _i3.Future<bool>.value(false),
            returnValueForMissingStub: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<void> signOut({_i6.BuildContext? context}) =>
      (super.noSuchMethod(
            Invocation.method(#signOut, [], {#context: context}),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<_i2.AuthResult> getUserProfileWithAuthStatus({
    _i6.BuildContext? context,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getUserProfileWithAuthStatus, [], {
              #context: context,
            }),
            returnValue: _i3.Future<_i2.AuthResult>.value(
              _FakeAuthResult_0(
                this,
                Invocation.method(#getUserProfileWithAuthStatus, [], {
                  #context: context,
                }),
              ),
            ),
            returnValueForMissingStub: _i3.Future<_i2.AuthResult>.value(
              _FakeAuthResult_0(
                this,
                Invocation.method(#getUserProfileWithAuthStatus, [], {
                  #context: context,
                }),
              ),
            ),
          )
          as _i3.Future<_i2.AuthResult>);

  @override
  _i3.Future<Map<String, String>> getAuthHeaders({_i6.BuildContext? context}) =>
      (super.noSuchMethod(
            Invocation.method(#getAuthHeaders, [], {#context: context}),
            returnValue: _i3.Future<Map<String, String>>.value(
              <String, String>{},
            ),
            returnValueForMissingStub: _i3.Future<Map<String, String>>.value(
              <String, String>{},
            ),
          )
          as _i3.Future<Map<String, String>>);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  _i3.Future<_i7.User?> getUserProfile() =>
      (super.noSuchMethod(
            Invocation.method(#getUserProfile, []),
            returnValue: _i3.Future<_i7.User?>.value(),
            returnValueForMissingStub: _i3.Future<_i7.User?>.value(),
          )
          as _i3.Future<_i7.User?>);

  @override
  _i3.Future<Map<String, dynamic>> handleOAuthSuccessCallback(Uri? uri) =>
      (super.noSuchMethod(
            Invocation.method(#handleOAuthSuccessCallback, [uri]),
            returnValue: _i3.Future<Map<String, dynamic>>.value(
              <String, dynamic>{},
            ),
            returnValueForMissingStub: _i3.Future<Map<String, dynamic>>.value(
              <String, dynamic>{},
            ),
          )
          as _i3.Future<Map<String, dynamic>>);
}
